<?php

namespace App\Services;

use Firebase\JWT\JWT;
use GuzzleHttp\Client as HttpClient;
use GuzzleHttp\Exception\RequestException;

class FCMService
{
    protected $httpClient;
    protected $clientEmail;
    protected $privateKey;

    public function __construct()
    {
        $jsonKey = json_decode(file_get_contents(public_path('vrangerAccountKey.json')), true);

        $this->clientEmail = $jsonKey['client_email'];
        $this->privateKey = $jsonKey['private_key'];

        $this->httpClient = new HttpClient([
            'base_uri' => 'https://fcm.googleapis.com/v1/projects/vranger-13d92/messages:send'
        ]);
    }

    public function sendNotification($deviceToken, $title, $body, $data = [])
    {
        try {
            // Generate the JWT for OAuth2
            $jwt = $this->generateJWT();

            // Exchange JWT for an access token
            $token = $this->fetchAccessToken($jwt);

            if ($token) {
                $message = [
                    'message' => [
                        'token' => $deviceToken,
                        'notification' => [
                            'title' => $title,
                            'body' => $body,
                        ],
                        'data' => $data,
                    ]
                ];

                // Send the notification request
                $response = $this->httpClient->post('', [
                    'headers' => [
                        'Authorization' => 'Bearer ' . $token,
                        'Content-Type' => 'application/json',
                    ],
                    'json' => $message,
                ]);

                return $response->getBody()->getContents();
            } else {
                throw new \Exception('Failed to retrieve access token.');
            }
        } catch (RequestException $e) {
            return $e->getMessage();
        }
    }

    protected function generateJWT()
    {
        $now = time();
        $exp = $now + 3600; // Token expires in 1 hour

        $payload = [
            'iss' => $this->clientEmail,
            'sub' => $this->clientEmail,
            'aud' => 'https://oauth2.googleapis.com/token',
            'iat' => $now,
            'exp' => $exp,
        ];

        return JWT::encode($payload, $this->privateKey, 'RS256');
    }

    protected function fetchAccessToken($jwt)
    {
        try {
            $response = $this->httpClient->post('https://oauth2.googleapis.com/token', [
                'form_params' => [
                    'grant_type' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                    'assertion' => $jwt,
                ],
            ]);

            $body = json_decode($response->getBody(), true);
            return $body['access_token'] ?? null;
        } catch (RequestException $e) {
            return null;
        }
    }
}
